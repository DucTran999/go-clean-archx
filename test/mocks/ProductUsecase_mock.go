// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/DucTran999/go-clean-archx/internal/dto"
	"github.com/DucTran999/go-clean-archx/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// NewProductUsecase creates a new instance of ProductUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductUsecase {
	mock := &ProductUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ProductUsecase is an autogenerated mock type for the ProductUsecase type
type ProductUsecase struct {
	mock.Mock
}

type ProductUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductUsecase) EXPECT() *ProductUsecase_Expecter {
	return &ProductUsecase_Expecter{mock: &_m.Mock}
}

// CreateProduct provides a mock function for the type ProductUsecase
func (_mock *ProductUsecase) CreateProduct(ctx context.Context, input dto.CreateProductInput) (*entity.Product, error) {
	ret := _mock.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 *entity.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.CreateProductInput) (*entity.Product, error)); ok {
		return returnFunc(ctx, input)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, dto.CreateProductInput) *entity.Product); ok {
		r0 = returnFunc(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, dto.CreateProductInput) error); ok {
		r1 = returnFunc(ctx, input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// ProductUsecase_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type ProductUsecase_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - input dto.CreateProductInput
func (_e *ProductUsecase_Expecter) CreateProduct(ctx interface{}, input interface{}) *ProductUsecase_CreateProduct_Call {
	return &ProductUsecase_CreateProduct_Call{Call: _e.mock.On("CreateProduct", ctx, input)}
}

func (_c *ProductUsecase_CreateProduct_Call) Run(run func(ctx context.Context, input dto.CreateProductInput)) *ProductUsecase_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 dto.CreateProductInput
		if args[1] != nil {
			arg1 = args[1].(dto.CreateProductInput)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ProductUsecase_CreateProduct_Call) Return(product *entity.Product, err error) *ProductUsecase_CreateProduct_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *ProductUsecase_CreateProduct_Call) RunAndReturn(run func(ctx context.Context, input dto.CreateProductInput) (*entity.Product, error)) *ProductUsecase_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}
